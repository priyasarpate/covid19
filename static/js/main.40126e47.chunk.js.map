{"version":3,"sources":["Components/NavBar.js","InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","Component","InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40126e47.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './navbar.css';\n\nclass NavBar extends Component{\n    render(){\n        return(\n            <div className=\"Nav\">\n              <h1 className=\"Name\">Covid19 Tracker</h1> \n               </div>\n\n        )\n    }\n}\nexport default NavBar;","import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;","// import { Tooltip } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport numeral from \"numeral\";\n\n\n\nconst casesTypeColors = {\n   cases: {\n     hex: \"#CC1034\",\n     rgb: \"rgb(204, 16, 52)\",\n     half_op: \"rgba(204, 16, 52, 0.5)\",\n     multiplier: 800,\n   },\n   recovered: {\n     hex: \"#7dd71d\",\n     rgb: \"rgb(125, 215, 29)\",\n     half_op: \"rgba(125, 215, 29, 0.5)\",\n     multiplier: 1200,\n   },\n   deaths: {\n     hex: \"#fb4443\",\n     rgb: \"rgb(251, 68, 67)\",\n     half_op: \"rgba(251, 68, 67, 0.5)\",\n     multiplier: 2000,\n   },\n };\n\nexport const sortData = (data) => {\n   const sortedData = [...data];\n\nreturn sortedData.sort((a,b)  => (a.cases > b.cases ? -1 : 1));\n\n}\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n// draw the circles  on the Tooltip\n\n   export const showDataOnMap = (data, casesType = \"cases\") =>\n   data.map((country) => (\n     <Circle\n       center={[country.countryInfo.lat, country.countryInfo.long]}\n       color={casesTypeColors[casesType].hex}\n       fillColor={casesTypeColors[casesType].hex}\n       fillOpacity={0.4}\n       radius={\n         Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n       }\n     >\n        <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n        </Popup>\n        </Circle>\n   ));","\nimport React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n      <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'/>\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './Components/navbar.css';\nimport './Table.css';\nimport './InfoBox.css';\nimport NavBar from './Components/NavBar';\nimport { MenuItem, FormControl, Select, CardContent, Card } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport CountryTable from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] =  useState([])\n  const [casesType, setCasesType] = useState('cases')\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data)\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n\n        });\n    }\n    getCountriesData();\n  },\n    []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    // setCountry(countryCode)\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/countries' :\n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n    await fetch(url)\n    .then((response)=> response.json())\n    .then(data => {\n\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(4);\n\n    });\n\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"app_left\">\n      <div className=\"nav-conatainer\">\n          <NavBar />\n          {/* <h1>Covid 19 tracker</h1> */}\n        </div>\n        <div className=\"drop-conatiner\">\n          <FormControl className=\"app-dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map(country => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n        {/* infobox */}\n        <div className=\"app_stats\">\n          <InfoBox\n          onClick={(e) => setCasesType('cases')}\n           title='Coronavirus cases' \n           isRed\n           active={casesType === \"cases\"}\n          cases={prettyPrintStat(countryInfo.todayCases)} \n          total={prettyPrintStat(countryInfo.cases)}/>\n\n          <InfoBox\n           onClick={(e) => setCasesType('recovered')} \n          title='Recovered' \n          active={casesType === \"recovered\"}\n          cases={prettyPrintStat(countryInfo.todayRecovered)} \n          total={prettyPrintStat(countryInfo.recovered)}/>\n\n\n          <InfoBox\n            onClick={(e) => setCasesType('deaths')}\n            title='Deaths' \n            isRed\n            active={casesType === \"deaths\"}\n          cases={prettyPrintStat(countryInfo.todayDeaths)} \n          total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n\n        {/* map */}\n        <div>\n          <Map \n          casesType={casesType}\n          countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n        </div>\n     </div>\n     {/* end the left side */}\n     <div className=\"app_right\">\n       {/* table */}\n       \n       <Card>\n         <CardContent>\n           <h3>Live cases of country</h3>\n           <CountryTable countries={tableData}/>\n           <h3>Worldwide new {casesType}</h3>\n           <LineGraph casesType={casesType} />\n         </CardContent>\n       </Card>\n     </div>\n     {/* graph */}\n\n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}